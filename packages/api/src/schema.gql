# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BytesFilter {
  equals: String
  in: [String!]
  not: NestedBytesFilter
  notIn: [String!]
}

input ContributorOrderByWithRelationInput {
  contributor_code: SortOrder
  contributor_id: SortOrder
  contributor_name: SortOrder
  point: SortOrder
  project_id: SortOrder
}

enum ContributorScalarFieldEnum {
  contributor_code
  contributor_id
  contributor_name
  created_at
  point
  project_id
  updated_at
}

input ContributorWhereInput {
  AND: [ContributorWhereInput!]
  NOT: [ContributorWhereInput!]
  OR: [ContributorWhereInput!]
  contributor_code: StringFilter
  contributor_id: IntFilter
  contributor_name: StringFilter
  point: IntFilter
  project_id: IntFilter
}

input ContributorWhereUniqueInput {
  contributor_id: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """."""
  bulkAirdrop: Response!

  """."""
  mockUpdateLedger: Response!

  """."""
  prizeProject(data: [PrizeProjectInput!]!): Response!

  """."""
  reconcile(voter_address: String!): Response!

  """."""
  unvote(amount: Float!, project_id: Int!, voter_address: String!): Response!

  """."""
  upsertProject(data: ProjectCreateInput!): Response!

  """."""
  upsertProjectLedger(data: Project_ledgerCreateInput!): Response!

  """."""
  vote(amount: Float!, project_id: Int!, voter_address: String!): Response!
}

input NestedBytesFilter {
  equals: String
  in: [String!]
  not: NestedBytesFilter
  notIn: [String!]
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input PrizeProjectInput {
  checked: Boolean!
  invested_amount: Float!
  project_id: Float!
  review_phase: String!
}

input ProjectCreateInput {
  avatar_uri: String
  campaign_deadline: DateTime
  complete_date: DateTime
  contributor_count: Int
  cover_picture: String
  description: String
  end_date: DateTime
  invested_amount: Int
  minimum_contributor_count: Int
  name: String!
  project_code: Int!
  review_phase: String
  service_id: Int!
  start_date: DateTime
  status: Int
  voted_amount: Float
}

input ProjectOrderByWithRelationInput {
  avatar_uri: SortOrder
  campaign_deadline: SortOrder
  complete_date: SortOrder
  contributor_count: SortOrder
  cover_picture: SortOrder
  description: SortOrder
  end_date: SortOrder
  invested_amount: SortOrder
  minimum_contributor_count: SortOrder
  name: SortOrder
  project_code: SortOrder
  project_id: SortOrder
  review_phase: SortOrder
  service_id: SortOrder
  start_date: SortOrder
  status: SortOrder
  voted_amount: SortOrder
}

enum ProjectScalarFieldEnum {
  avatar_uri
  campaign_deadline
  complete_date
  contributor_count
  cover_picture
  created_at
  description
  end_date
  invested_amount
  minimum_contributor_count
  name
  project_code
  project_id
  review_phase
  service_id
  start_date
  status
  updated_at
  voted_amount
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  avatar_uri: StringFilter
  campaign_deadline: DateTimeNullableFilter
  complete_date: DateTimeNullableFilter
  contributor_count: IntFilter
  cover_picture: BytesFilter
  description: StringFilter
  end_date: DateTimeNullableFilter
  invested_amount: IntFilter
  minimum_contributor_count: IntFilter
  name: StringFilter
  project_code: IntFilter
  project_id: IntFilter
  review_phase: StringFilter
  service_id: IntFilter
  start_date: DateTimeNullableFilter
  status: IntFilter
  voted_amount: FloatNullableFilter
}

input ProjectWhereUniqueInput {
  project_id: Int
}

input Project_detailOrderByWithRelationInput {
  campaign_deadline: SortOrder
  carry_over_balance: SortOrder
  credit_amount: SortOrder
  fundraising_deadline: SortOrder
  index: SortOrder
  price_coefficient: SortOrder
  project_code: SortOrder
  project_id: SortOrder
  service_id: SortOrder
  sum_project_amount: SortOrder
  ticket_count_closed: SortOrder
  ticket_count_total: SortOrder
}

enum Project_detailScalarFieldEnum {
  campaign_deadline
  carry_over_balance
  created_at
  credit_amount
  fundraising_deadline
  index
  price_coefficient
  project_code
  project_id
  service_id
  sum_project_amount
  ticket_count_closed
  ticket_count_total
  updated_at
}

input Project_detailWhereInput {
  AND: [Project_detailWhereInput!]
  NOT: [Project_detailWhereInput!]
  OR: [Project_detailWhereInput!]
  campaign_deadline: DateTimeNullableFilter
  carry_over_balance: IntFilter
  credit_amount: IntFilter
  fundraising_deadline: DateTimeNullableFilter
  index: IntFilter
  price_coefficient: IntFilter
  project_code: IntFilter
  project_id: IntFilter
  service_id: IntFilter
  sum_project_amount: FloatFilter
  ticket_count_closed: IntFilter
  ticket_count_total: IntFilter
}

input Project_detailWhereUniqueInput {
  index: Int
}

input Project_ledgerCreateInput {
  created_date: DateTime
  expense: Float!
  income: Float!
  project_id: Int!
  target: Int!
  unit: String!
}

input Project_ledgerOrderByWithRelationInput {
  created_date: SortOrder
  expense: SortOrder
  income: SortOrder
  index: SortOrder
  project_id: SortOrder
  target: SortOrder
  unit: SortOrder
}

enum Project_ledgerScalarFieldEnum {
  created_at
  created_date
  expense
  income
  index
  project_id
  target
  unit
  updated_at
}

input Project_ledgerWhereInput {
  AND: [Project_ledgerWhereInput!]
  NOT: [Project_ledgerWhereInput!]
  OR: [Project_ledgerWhereInput!]
  created_date: DateTimeFilter
  expense: FloatFilter
  income: FloatFilter
  index: IntFilter
  project_id: IntFilter
  target: IntFilter
  unit: StringFilter
}

input Project_ledgerWhereUniqueInput {
  index: Int
}

type Query {
  """."""
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): Response!

  """."""
  findFirstProjectDetail(cursor: Project_detailWhereUniqueInput, distinct: [Project_detailScalarFieldEnum!], orderBy: [Project_detailOrderByWithRelationInput!], skip: Int, take: Int, where: Project_detailWhereInput): Response!

  """."""
  findManyContributor(cursor: ContributorWhereUniqueInput, distinct: [ContributorScalarFieldEnum!], orderBy: [ContributorOrderByWithRelationInput!], skip: Int, take: Int, where: ContributorWhereInput): Response!

  """."""
  findManyPersonalTicket(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): Response!

  """."""
  findManyProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): Response!

  """."""
  findManyProjectDetail(cursor: Project_detailWhereUniqueInput, distinct: [Project_detailScalarFieldEnum!], orderBy: [Project_detailOrderByWithRelationInput!], skip: Int, take: Int, where: Project_detailWhereInput): Response!

  """."""
  findManyProjectLedger(cursor: Project_ledgerWhereUniqueInput, distinct: [Project_ledgerScalarFieldEnum!], orderBy: [Project_ledgerOrderByWithRelationInput!], skip: Int, take: Int, where: Project_ledgerWhereInput): Response!

  """."""
  findManyProjectTicket(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): Response!

  """."""
  findManyVoter(cursor: VoterWhereUniqueInput, distinct: [VoterScalarFieldEnum!], orderBy: [VoterOrderByWithRelationInput!], skip: Int, take: Int, where: VoterWhereInput): Response!
}

type Response {
  response: JSON
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input TicketOrderByWithRelationInput {
  complete_date: SortOrder
  contributor_id: SortOrder
  end_date: SortOrder
  name: SortOrder
  project_id: SortOrder
  sprint_id: SortOrder
  start_date: SortOrder
  status: SortOrder
  ticket_code: SortOrder
  ticket_id: SortOrder
  type: SortOrder
}

enum TicketScalarFieldEnum {
  complete_date
  contributor_id
  created_at
  end_date
  name
  project_id
  sprint_id
  start_date
  status
  ticket_code
  ticket_id
  type
  updated_at
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  complete_date: DateTimeNullableFilter
  contributor_id: IntNullableFilter
  end_date: DateTimeNullableFilter
  name: StringNullableFilter
  project_id: IntFilter
  sprint_id: IntNullableFilter
  start_date: DateTimeNullableFilter
  status: IntNullableFilter
  ticket_code: IntFilter
  ticket_id: IntFilter
  type: IntFilter
}

input TicketWhereUniqueInput {
  ticket_id: Int
}

input VoterOrderByWithRelationInput {
  evm_address: SortOrder
  id: SortOrder
  max_voteable: SortOrder
  mock_follow_project_id: SortOrder
  name: SortOrder
  pending_airdrop: SortOrder
  pending_reconcile: SortOrder
  project_id: SortOrder
  reward: SortOrder
  secret: SortOrder
}

enum VoterScalarFieldEnum {
  evm_address
  id
  max_voteable
  mock_follow_project_id
  name
  pending_airdrop
  pending_reconcile
  project_id
  reward
  secret
}

input VoterWhereInput {
  AND: [VoterWhereInput!]
  NOT: [VoterWhereInput!]
  OR: [VoterWhereInput!]
  evm_address: StringNullableFilter
  id: IntFilter
  max_voteable: FloatNullableFilter
  mock_follow_project_id: IntNullableFilter
  name: StringNullableFilter
  pending_airdrop: FloatNullableFilter
  pending_reconcile: FloatNullableFilter
  project_id: IntNullableFilter
  reward: FloatNullableFilter
  secret: StringNullableFilter
}

input VoterWhereUniqueInput {
  id: Int
}