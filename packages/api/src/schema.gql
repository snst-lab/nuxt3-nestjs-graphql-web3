# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BytesFilter {
  equals: String
  in: [String!]
  not: NestedBytesFilter
  notIn: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """."""
  upsertProject(data: ProjectCreateInput!): Response!
}

input NestedBytesFilter {
  equals: String
  in: [String!]
  not: NestedBytesFilter
  notIn: [String!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input ProjectCreateInput {
  avatar_uri: String
  campaign_deadline: DateTime
  complete_date: DateTime
  contributor_count: Int
  cover_picture: String
  description: String
  end_date: DateTime
  minimum_contributor_count: Int
  name: String!
  project_code: Int!
  service_id: Int!
  start_date: DateTime
  status: Int
}

input ProjectOrderByWithRelationInput {
  avatar_uri: SortOrder
  campaign_deadline: SortOrder
  complete_date: SortOrder
  contributor_count: SortOrder
  cover_picture: SortOrder
  description: SortOrder
  end_date: SortOrder
  minimum_contributor_count: SortOrder
  name: SortOrder
  project_code: SortOrder
  project_id: SortOrder
  service_id: SortOrder
  start_date: SortOrder
  status: SortOrder
}

enum ProjectScalarFieldEnum {
  avatar_uri
  campaign_deadline
  complete_date
  contributor_count
  cover_picture
  created_at
  description
  end_date
  minimum_contributor_count
  name
  project_code
  project_id
  service_id
  start_date
  status
  updated_at
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  avatar_uri: StringFilter
  campaign_deadline: DateTimeNullableFilter
  complete_date: DateTimeNullableFilter
  contributor_count: IntFilter
  cover_picture: BytesFilter
  description: StringFilter
  end_date: DateTimeNullableFilter
  minimum_contributor_count: IntFilter
  name: StringFilter
  project_code: IntFilter
  project_id: IntFilter
  service_id: IntFilter
  start_date: DateTimeNullableFilter
  status: IntFilter
}

input ProjectWhereUniqueInput {
  project_id: Int
}

type Query {
  """."""
  findManyProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): Response!
}

type Response {
  response: JSON
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}